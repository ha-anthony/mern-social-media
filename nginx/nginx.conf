server {
    listen 443 ssl;
    server_name _;  # This matches any hostname, including the IP address

    ssl_certificate /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx.key;

    # SSL settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    # Proxy API requests to backend server
    location /api {
        proxy_pass http://backend:8080;  # Assuming 'backend' is the Docker service name for your backend
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;  # Required for WebSocket connections
        proxy_set_header Connection "upgrade";   # Required for WebSocket connections
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Proxy requests to the Socket.io server
    location /socket.io/ {
        proxy_pass http://backend:8080;  # Same backend server handling Socket.io requests
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;  # Handle WebSocket connections
        proxy_set_header Connection "upgrade";   # Handle WebSocket connections
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Proxy frontend requests to frontend server
    location / {
        proxy_pass http://frontend:3000;  # Assuming 'frontend' is the Docker service name for your frontend
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
